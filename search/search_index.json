{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FFS \u00b6 Feature flags that are fast \u26a1, lean \ud83e\udd0f, and open-source \ud83c\udf0d. Project \u00b6 FFS is built primarily on Kotlin Multiplatform and made up of 4 major components: A dashboard to create and manage feature flags. SDKs to consume feature flags: For frontends or other unsafe environments, relying on the server for evaluation results. For backends or other safe environments, evaluating feature flags locally. A server to provide the API for the dashboard and SDKs. Getting started \u00b6 Getting started is as simple as: Head over to https://ffs.delivery (or your own instance). Create an organization . Generate an API token . Set up an SDK . Create feature flags . The remaining docs go over components, workflows, and advanced options. Why \u00b6 Because no other solutions nail this specific intersection of goals. \u26a1 Updates using server-sent events . Changes are propagated instantly to clients. \u26a1 Evaluates over 40,000 rules per second. On a Raspberry Pi 4 Model B. Per core. \u26a1 \ud83d\udd1c Dedicated frontend library for JavaScript. No compromises where bundle size matters. \ud83e\udd0f Limited in feature set and code surface. It does few things, and it does them right. \ud83e\udd0f No bloat. Complimentary functions should be handled by complimentary tools. \ud83e\udd0f Easy to grasp, maintain, and improve across all libraries and server. \ud83c\udf0d Open-source first and foremost. No special versions or closed add-ons for enterprise. \ud83c\udf0e \ud83d\udd1c Easy to set up and deploy. We can run it for you, but out of convenience, not complexity. \ud83c\udf0f All contributions are welcome, and we're happy to help along the way. Technology \u00b6 Kotlin is the backbone of FFS. It uses Kotlin/JS in the dashboard, to Kotlin/Multiplatform in the SDKs, to Kotlin/JVM in the server. While this optimizes development time, a larger benefit is correctness. Sharing code and tests across projects and platforms helps ensure consistent behavior, and that any singular fix or improvement immediately benefits multiple components. Cross-platform has a bad rap, but Kotlin inverts the usual paradigm. By compiling down to and deeply integrating with each platform it supports, instead of trying to replace it, Kotlin provides the benefits of code sharing without most interoperability or performance challenges.","title":"Home"},{"location":"#ffs","text":"Feature flags that are fast \u26a1, lean \ud83e\udd0f, and open-source \ud83c\udf0d.","title":"FFS"},{"location":"#project","text":"FFS is built primarily on Kotlin Multiplatform and made up of 4 major components: A dashboard to create and manage feature flags. SDKs to consume feature flags: For frontends or other unsafe environments, relying on the server for evaluation results. For backends or other safe environments, evaluating feature flags locally. A server to provide the API for the dashboard and SDKs.","title":"Project"},{"location":"#getting-started","text":"Getting started is as simple as: Head over to https://ffs.delivery (or your own instance). Create an organization . Generate an API token . Set up an SDK . Create feature flags . The remaining docs go over components, workflows, and advanced options.","title":"Getting started"},{"location":"#why","text":"Because no other solutions nail this specific intersection of goals. \u26a1 Updates using server-sent events . Changes are propagated instantly to clients. \u26a1 Evaluates over 40,000 rules per second. On a Raspberry Pi 4 Model B. Per core. \u26a1 \ud83d\udd1c Dedicated frontend library for JavaScript. No compromises where bundle size matters. \ud83e\udd0f Limited in feature set and code surface. It does few things, and it does them right. \ud83e\udd0f No bloat. Complimentary functions should be handled by complimentary tools. \ud83e\udd0f Easy to grasp, maintain, and improve across all libraries and server. \ud83c\udf0d Open-source first and foremost. No special versions or closed add-ons for enterprise. \ud83c\udf0e \ud83d\udd1c Easy to set up and deploy. We can run it for you, but out of convenience, not complexity. \ud83c\udf0f All contributions are welcome, and we're happy to help along the way.","title":"Why"},{"location":"#technology","text":"Kotlin is the backbone of FFS. It uses Kotlin/JS in the dashboard, to Kotlin/Multiplatform in the SDKs, to Kotlin/JVM in the server. While this optimizes development time, a larger benefit is correctness. Sharing code and tests across projects and platforms helps ensure consistent behavior, and that any singular fix or improvement immediately benefits multiple components. Cross-platform has a bad rap, but Kotlin inverts the usual paradigm. By compiling down to and deeply integrating with each platform it supports, instead of trying to replace it, Kotlin provides the benefits of code sharing without most interoperability or performance challenges.","title":"Technology"},{"location":"changelog/","text":".md-typeset h1, .md-content__button { display: none; } Changelog \u00b6 This file documents all notable changes, following the Keep a Changelog format. [Unreleased] \u00b6 Initial release.","title":"Changelog"},{"location":"changelog/#changelog","text":"This file documents all notable changes, following the Keep a Changelog format.","title":"Changelog"},{"location":"changelog/#unreleased","text":"Initial release.","title":"[Unreleased]"},{"location":"api/","text":"API \u00b6 Semantic REST API for FFS. Design \u00b6 The design follows shallow nesting , with each route having the minimal amount of information to uniquely identify the resource. It strikes a balance between descriptive routes and deep nesting. For example, to create a project within an organization: POST /organizations/42/projects To update it, the project id suffices: PUT /projects/123 Otherwise, it's a regular REST API, attempting to use verbs and paths meaningfully. Response codes \u00b6 Response codes are used consistently, e.g.: 200 when obtaining a resource. 201 when creating a resource, with the resource path included in the Location header. 204 when updating or deleting a resource. 400 when parameters are missing or invalid. 401 when a request lacks authentication. 403 when a request is authenticated, but not authorized. Versioning \u00b6 The API supports versioning in the first segment of the path. If omitted, it defaults to the latest version. Authentication \u00b6 There are two primary modes of authentication: Via user session , with varying permissions per organization. Via token , which encodes access and permission to a specific project. The former is applicable to users using the dashboard. The latter is most relevant for the SDK. Streaming \u00b6 There are endpoints which support server-sent events , for clients that request streaming. Formats \u00b6 The API supports JSON. It could support CBOR, but the benefits are questionable. The streaming APIs are locked into one specific format, and JavaScript clients don't benefit from better performance even though they see a penalty in bundle size.","title":"API"},{"location":"api/#api","text":"Semantic REST API for FFS.","title":"API"},{"location":"api/#design","text":"The design follows shallow nesting , with each route having the minimal amount of information to uniquely identify the resource. It strikes a balance between descriptive routes and deep nesting. For example, to create a project within an organization: POST /organizations/42/projects To update it, the project id suffices: PUT /projects/123 Otherwise, it's a regular REST API, attempting to use verbs and paths meaningfully.","title":"Design"},{"location":"api/#response-codes","text":"Response codes are used consistently, e.g.: 200 when obtaining a resource. 201 when creating a resource, with the resource path included in the Location header. 204 when updating or deleting a resource. 400 when parameters are missing or invalid. 401 when a request lacks authentication. 403 when a request is authenticated, but not authorized.","title":"Response codes"},{"location":"api/#versioning","text":"The API supports versioning in the first segment of the path. If omitted, it defaults to the latest version.","title":"Versioning"},{"location":"api/#authentication","text":"There are two primary modes of authentication: Via user session , with varying permissions per organization. Via token , which encodes access and permission to a specific project. The former is applicable to users using the dashboard. The latter is most relevant for the SDK.","title":"Authentication"},{"location":"api/#streaming","text":"There are endpoints which support server-sent events , for clients that request streaming.","title":"Streaming"},{"location":"api/#formats","text":"The API supports JSON. It could support CBOR, but the benefits are questionable. The streaming APIs are locked into one specific format, and JavaScript clients don't benefit from better performance even though they see a penalty in bundle size.","title":"Formats"},{"location":"api/flags/","text":"Flags \u00b6 Create flag \u00b6 POST /projects/{id}/flags Requires an authenticated user that is a user or admin in this flag's organization. Query parameter Type Required Description name String Yes Name of the flag. rule String Yes Rule of the flag. On success, responds 201 Created with an empty body. List flags \u00b6 GET /projects/{id}/flags Requires an authenticated user that is a reader, user, or admin, in this flag's organization. On success, responds 200 OK with a JSON array containing all flags for the project. Info This endpoint can be used without the project {id} , as long it is inferred from the authentication token. Tokens are always associated with a specific project. Get flag \u00b6 GET /flags/{id} Requires an authenticated user that is a reader, user, or admin, in this flag's organization. On success, responds 200 OK with a JSON object for the flag. Update flag \u00b6 PUT /flags/{id} Requires an authenticated user that is a user or admin in this flag's organization. Query parameter Type Required Description name String No Name of the flag. rule String No Rule of the flag. On success, responds 204 No Content with an empty body. Evaluate flags \u00b6 GET /flags/eval Requires an token access with eval permissions to this flag's project. Query parameter Type Required Description env String Yes JSON-encoded environment string. On success, responds 200 OK with a JSON object mapping flag names to their evaluation. Info This endpoint is used without the project {id} , since it is inferred from the authentication token. Tokens are always associated with a specific project. Archive flag \u00b6 PUT /flags/{id}/archive Requires an authenticated user that is a user or admin in this flag's organization. On success, responds 204 No Content with an empty body. Unarchive flag \u00b6 DELETE /flags/{id}/archive Requires an authenticated user that is a user or admin in this flag's organization. On success, responds 204 No Content with an empty body.","title":"Flags"},{"location":"api/flags/#flags","text":"","title":"Flags"},{"location":"api/flags/#create-flag","text":"POST /projects/{id}/flags Requires an authenticated user that is a user or admin in this flag's organization. Query parameter Type Required Description name String Yes Name of the flag. rule String Yes Rule of the flag. On success, responds 201 Created with an empty body.","title":"Create flag"},{"location":"api/flags/#list-flags","text":"GET /projects/{id}/flags Requires an authenticated user that is a reader, user, or admin, in this flag's organization. On success, responds 200 OK with a JSON array containing all flags for the project. Info This endpoint can be used without the project {id} , as long it is inferred from the authentication token. Tokens are always associated with a specific project.","title":"List flags"},{"location":"api/flags/#get-flag","text":"GET /flags/{id} Requires an authenticated user that is a reader, user, or admin, in this flag's organization. On success, responds 200 OK with a JSON object for the flag.","title":"Get flag"},{"location":"api/flags/#update-flag","text":"PUT /flags/{id} Requires an authenticated user that is a user or admin in this flag's organization. Query parameter Type Required Description name String No Name of the flag. rule String No Rule of the flag. On success, responds 204 No Content with an empty body.","title":"Update flag"},{"location":"api/flags/#evaluate-flags","text":"GET /flags/eval Requires an token access with eval permissions to this flag's project. Query parameter Type Required Description env String Yes JSON-encoded environment string. On success, responds 200 OK with a JSON object mapping flag names to their evaluation. Info This endpoint is used without the project {id} , since it is inferred from the authentication token. Tokens are always associated with a specific project.","title":"Evaluate flags"},{"location":"api/flags/#archive-flag","text":"PUT /flags/{id}/archive Requires an authenticated user that is a user or admin in this flag's organization. On success, responds 204 No Content with an empty body.","title":"Archive flag"},{"location":"api/flags/#unarchive-flag","text":"DELETE /flags/{id}/archive Requires an authenticated user that is a user or admin in this flag's organization. On success, responds 204 No Content with an empty body.","title":"Unarchive flag"},{"location":"api/organizations/","text":"Organizations \u00b6 Create organization \u00b6 Requires an authenticated user. They become an admin of the organization. POST /organizations Query parameter Type Required Description name String Yes Name of the organization. On success, responds 201 Created with an empty body. List organizations \u00b6 Requires an authenticated user. GET /organizations On success, responds 200 OK with a JSON array containing all organizations for the user. Get organization \u00b6 Requires an authenticated user that is a reader, user, or admin in this organization. GET /organizations/{id} On success, responds 200 OK with a JSON object for the organization. Update organization \u00b6 Requires an authenticated user that is a user or admin in this organization. PUT /organizations/{id} Parameter Type Required Description name String No Name of the organization. On success, responds 204 No Content with an empty body. Delete organization \u00b6 DELETE /organizations/{id} Requires an authenticated user that is an admin in this organization. On success, responds 204 No Content with an empty body. Add user to organization \u00b6 POST /organizations/{id}/users/{user_id} Requires an authenticated user that is an admin in this organization. Query parameter Type Required Description role \"admin\", \"user\", or \"reader\" Yes Role to assign to the user. On success, responds 201 Created with an empty body. Update user role in organization \u00b6 PUT /organizations/{id}/users/{user_id} Requires an authenticated user that is an admin in this organization. Query parameter Type Required Description role \"admin\", \"user\", or \"reader\" Yes Role to assign to the user. On success, responds 204 No Content with an empty body. Remove user from organization \u00b6 DELETE /organizations/{id}/users/{user_id} Requires an authenticated user that is an admin in this organization. On success, responds 204 No Content with an empty body.","title":"Organizations"},{"location":"api/organizations/#organizations","text":"","title":"Organizations"},{"location":"api/organizations/#create-organization","text":"Requires an authenticated user. They become an admin of the organization. POST /organizations Query parameter Type Required Description name String Yes Name of the organization. On success, responds 201 Created with an empty body.","title":"Create organization"},{"location":"api/organizations/#list-organizations","text":"Requires an authenticated user. GET /organizations On success, responds 200 OK with a JSON array containing all organizations for the user.","title":"List organizations"},{"location":"api/organizations/#get-organization","text":"Requires an authenticated user that is a reader, user, or admin in this organization. GET /organizations/{id} On success, responds 200 OK with a JSON object for the organization.","title":"Get organization"},{"location":"api/organizations/#update-organization","text":"Requires an authenticated user that is a user or admin in this organization. PUT /organizations/{id} Parameter Type Required Description name String No Name of the organization. On success, responds 204 No Content with an empty body.","title":"Update organization"},{"location":"api/organizations/#delete-organization","text":"DELETE /organizations/{id} Requires an authenticated user that is an admin in this organization. On success, responds 204 No Content with an empty body.","title":"Delete organization"},{"location":"api/organizations/#add-user-to-organization","text":"POST /organizations/{id}/users/{user_id} Requires an authenticated user that is an admin in this organization. Query parameter Type Required Description role \"admin\", \"user\", or \"reader\" Yes Role to assign to the user. On success, responds 201 Created with an empty body.","title":"Add user to organization"},{"location":"api/organizations/#update-user-role-in-organization","text":"PUT /organizations/{id}/users/{user_id} Requires an authenticated user that is an admin in this organization. Query parameter Type Required Description role \"admin\", \"user\", or \"reader\" Yes Role to assign to the user. On success, responds 204 No Content with an empty body.","title":"Update user role in organization"},{"location":"api/organizations/#remove-user-from-organization","text":"DELETE /organizations/{id}/users/{user_id} Requires an authenticated user that is an admin in this organization. On success, responds 204 No Content with an empty body.","title":"Remove user from organization"},{"location":"api/projects/","text":"Projects \u00b6 Create project \u00b6 POST /organizations/{id}/projects Requires an authenticated user that is a user or admin in this project's organization. Query parameter Type Required Description name String Yes Name of the project. On success, responds 201 Created with an empty body. List projects \u00b6 GET /organizations/{id}/projects Requires an authenticated user that is a reader, user, or admin, in this project's organization. On success, responds 200 OK with a JSON array containing all projects for the organization. Get project \u00b6 GET /project/{id} Requires an authenticated user that is a reader, user, or admin, in this project's organization. On success, responds 200 OK with a JSON object for the project. Update project \u00b6 PUT /projects/{id} Requires an authenticated user that is a user or admin in this project's organization. Query parameter Type Required Description name String No Name of the organization. On success, responds 204 No Content with an empty body. Delete project \u00b6 Requires an authenticated user that is an admin in this project's organization. DELETE /projects/{id} On success, responds 204 No Content with an empty body.","title":"Projects"},{"location":"api/projects/#projects","text":"","title":"Projects"},{"location":"api/projects/#create-project","text":"POST /organizations/{id}/projects Requires an authenticated user that is a user or admin in this project's organization. Query parameter Type Required Description name String Yes Name of the project. On success, responds 201 Created with an empty body.","title":"Create project"},{"location":"api/projects/#list-projects","text":"GET /organizations/{id}/projects Requires an authenticated user that is a reader, user, or admin, in this project's organization. On success, responds 200 OK with a JSON array containing all projects for the organization.","title":"List projects"},{"location":"api/projects/#get-project","text":"GET /project/{id} Requires an authenticated user that is a reader, user, or admin, in this project's organization. On success, responds 200 OK with a JSON object for the project.","title":"Get project"},{"location":"api/projects/#update-project","text":"PUT /projects/{id} Requires an authenticated user that is a user or admin in this project's organization. Query parameter Type Required Description name String No Name of the organization. On success, responds 204 No Content with an empty body.","title":"Update project"},{"location":"api/projects/#delete-project","text":"Requires an authenticated user that is an admin in this project's organization. DELETE /projects/{id} On success, responds 204 No Content with an empty body.","title":"Delete project"},{"location":"api/tokens/","text":"Tokens \u00b6 Create token for project \u00b6 POST /projects/{id}/tokens Requires an authenticated user that is a user or admin in this project's organization. Query parameter Type Required Description permission \"eval\" or \"read\" Yes Scope of the token. description String Yes Description of the token. On success, responds 201 Created with the token in the body. Get tokens for project \u00b6 GET /projects/{id}/tokens Requires an authenticated user that is a reader, user, or admin, in this project's organization. Query parameter Type Required Description role \"admin\", \"user\", or \"reader\" Yes Role to assign to the user. On success, responds 200 OK with a JSON array containing non-sensitive token data. Update token description \u00b6 PUT /tokens/{id} Requires an authenticated user that is a user or admin in this project's organization. Query parameter Type Required Description description String No Description of the token. On success, responds 204 No Content with an empty body. Delete token \u00b6 DELETE /tokens/{id} Requires an authenticated user that is a user or admin in this project's organization. On success, responds 204 No Content with an empty body.","title":"Tokens"},{"location":"api/tokens/#tokens","text":"","title":"Tokens"},{"location":"api/tokens/#create-token-for-project","text":"POST /projects/{id}/tokens Requires an authenticated user that is a user or admin in this project's organization. Query parameter Type Required Description permission \"eval\" or \"read\" Yes Scope of the token. description String Yes Description of the token. On success, responds 201 Created with the token in the body.","title":"Create token for project"},{"location":"api/tokens/#get-tokens-for-project","text":"GET /projects/{id}/tokens Requires an authenticated user that is a reader, user, or admin, in this project's organization. Query parameter Type Required Description role \"admin\", \"user\", or \"reader\" Yes Role to assign to the user. On success, responds 200 OK with a JSON array containing non-sensitive token data.","title":"Get tokens for project"},{"location":"api/tokens/#update-token-description","text":"PUT /tokens/{id} Requires an authenticated user that is a user or admin in this project's organization. Query parameter Type Required Description description String No Description of the token. On success, responds 204 No Content with an empty body.","title":"Update token description"},{"location":"api/tokens/#delete-token","text":"DELETE /tokens/{id} Requires an authenticated user that is a user or admin in this project's organization. On success, responds 204 No Content with an empty body.","title":"Delete token"},{"location":"api/users/","text":"Users \u00b6 Register \u00b6 POST /users/register No prior authentication required. Query parameter Type Required Description name String Yes Name of the user. email String Yes Email of the user. password String Yes Password of the user. On success, responds 201 Created with an empty body. Login \u00b6 POST /users/login No prior authentication required. Query parameter Type Required Description email String Yes Email of the user. password String Yes Password of the user. On success, responds 200 OK with a JSON object with the user data. Logout \u00b6 No prior authentication required, although it's a no-op if the user is not authenticated. POST /users/logout Responds 302 Found and redirects to / . Update user \u00b6 Requires an authenticated user. PUT /users/{id} Query parameter Type Required Description name String No Name of the user. email String No Email of the user. password String No Password of the user. current_password String If email or password are provided Current user password. On success, responds 204 No Content with an empty body. Delete user \u00b6 Requires an authenticated user. DELETE /users/{id} Query parameter Type Required Description current_password String Yes Current user password. On success, responds 302 Found and redirects to / .","title":"Users"},{"location":"api/users/#users","text":"","title":"Users"},{"location":"api/users/#register","text":"POST /users/register No prior authentication required. Query parameter Type Required Description name String Yes Name of the user. email String Yes Email of the user. password String Yes Password of the user. On success, responds 201 Created with an empty body.","title":"Register"},{"location":"api/users/#login","text":"POST /users/login No prior authentication required. Query parameter Type Required Description email String Yes Email of the user. password String Yes Password of the user. On success, responds 200 OK with a JSON object with the user data.","title":"Login"},{"location":"api/users/#logout","text":"No prior authentication required, although it's a no-op if the user is not authenticated. POST /users/logout Responds 302 Found and redirects to / .","title":"Logout"},{"location":"api/users/#update-user","text":"Requires an authenticated user. PUT /users/{id} Query parameter Type Required Description name String No Name of the user. email String No Email of the user. password String No Password of the user. current_password String If email or password are provided Current user password. On success, responds 204 No Content with an empty body.","title":"Update user"},{"location":"api/users/#delete-user","text":"Requires an authenticated user. DELETE /users/{id} Query parameter Type Required Description current_password String Yes Current user password. On success, responds 302 Found and redirects to / .","title":"Delete user"},{"location":"dashboard/","text":"Dashboard \u00b6 TODO: Dashboard overview.","title":"Dashboard"},{"location":"dashboard/#dashboard","text":"TODO: Dashboard overview.","title":"Dashboard"},{"location":"dashboard/api-tokens/","text":"API Tokens \u00b6 TODO: Explain how to manage API tokens in the UI.","title":"API tokens"},{"location":"dashboard/api-tokens/#api-tokens","text":"TODO: Explain how to manage API tokens in the UI.","title":"API Tokens"},{"location":"dashboard/feature-flags/","text":"Feature flags \u00b6 TODO: Explain how to manage feature flags in the UI.","title":"Feature flags"},{"location":"dashboard/feature-flags/#feature-flags","text":"TODO: Explain how to manage feature flags in the UI.","title":"Feature flags"},{"location":"dashboard/organizations-and-projects/","text":"Organizations and projects \u00b6 TODO: Explain how to manage organizations and projects in the UI.","title":"Organizatins and projects"},{"location":"dashboard/organizations-and-projects/#organizations-and-projects","text":"TODO: Explain how to manage organizations and projects in the UI.","title":"Organizations and projects"},{"location":"dashboard/permissions/","text":"Permissions \u00b6 TODO: Explain how permissions work across user accounts and API tokens.","title":"Permissions"},{"location":"dashboard/permissions/#permissions","text":"TODO: Explain how permissions work across user accounts and API tokens.","title":"Permissions"},{"location":"dashboard/users/","text":"Users \u00b6 TODO: Explain roles.","title":"Users"},{"location":"dashboard/users/#users","text":"TODO: Explain roles.","title":"Users"},{"location":"feature-flags/","text":"Feature flags \u00b6 Feature flags can be used to enable or disable functionality remotely without changing code. They decouple deployment from delivery, allowing teams to iterate faster and deploy more frequently, both key indicators of a high-performing team. Read more about the general technique in Pete Hodgson's article . To provide some examples, feature flags can be: Manually enabled or disabled Scheduled to be enabled or disabled at a specific date Enabled for specific sessions, users, countries, time zones, system loads, etc Gradually enabled over time for a group of users And depending on the metadata you provide to it via the SDK, you can do much more. Rules are powerful and flexible.","title":"Feature flags"},{"location":"feature-flags/#feature-flags","text":"Feature flags can be used to enable or disable functionality remotely without changing code. They decouple deployment from delivery, allowing teams to iterate faster and deploy more frequently, both key indicators of a high-performing team. Read more about the general technique in Pete Hodgson's article . To provide some examples, feature flags can be: Manually enabled or disabled Scheduled to be enabled or disabled at a specific date Enabled for specific sessions, users, countries, time zones, system loads, etc Gradually enabled over time for a group of users And depending on the metadata you provide to it via the SDK, you can do much more. Rules are powerful and flexible.","title":"Feature flags"},{"location":"feature-flags/anatomy-of-rules/","text":"Anatomy of rules \u00b6 At the heart of FFS are rules. Each feature flag is backed by a rule. It boils down to functions as commonly known in programming, or formulas as commonly seen in spreadsheets. Functions accept data, and return a result. That is numeric, between 0 and 1 . When it is 0 , the flag is disabled. When 1 , the flag is enabled. When in-between, the flag is partially enabled, meaning it is enabled for some users, proportionally to the value. Examples \u00b6 To build intuition, let's look at some examples: 0 : the flag is disabled. false : the flag is disabled (same as 0 ). 1 : the flag is enabled. true : the flag is enabled (same as 1 ). 0.5 : the flag is enabled for 50% of users. Let's take it up a notch, and look at more useful rules: gte ( now (), datetime ( \"2038-01-19T04:14:07+01:00\" )) : enabled after January 19 2038 at 03:14:07 UTC. matches ( \"*@example.com\" , env [ \"user.email\" ]) : enabled for emails ending in @example.com . map ( now (), datetime ( \"2022-11-08\" ), datetime ( \"2022-11-15\" ), 0 , 1 ) : gradual rollout between November 8 and November 16, 2022. not ( isblank ( env [ \"user.email\" ])) : enabled for logged in users (assuming their email is set when logging in). pow ( map ( now (), datetime ( \"2021-11-08\" ), datetime ( \"2021-11-15\" ), 0 , 1 ), 2 ) : gradual rollout again, but exponential instead of linear over the week. Environment \u00b6 All metadata supplied by the SDK can be accessed using env[\"<key>\"] . You can send anything that makes sense to your app, and then use it in rules. Info Noticed env [ \"user.email\" ] in the examples above? It was supplied by the SDK. Results \u00b6 Results are always numerical. true and false are mapped to 1 and 0 , respectively. Any result that's neither a number nor boolean is treated as 0 . Functions \u00b6 Name Type Syntax Description isblank Info isblank(value) Checks if the value is blank. eq Operator eq(a, b) Checks if a is equal to b . gt Operator gt(a, b) Checks if a is greater than b . gte Operator gte(a, b) Checks if a is greater than or equal to b . lt Operator lt(a, b) Checks if a is less than b . lte Operator lte(a, b) Checks if a is less than or equal to b . now Date now() Returns the current date and time. datetime Date datetime(value) Returns a date and time. value must follow ISO-8601's format date and time, or date. matches Lookup matches(regex, value) Checks if value matches regex . contains Lookup contains(list, value) Checks if list contains value . not Logical not(value) Negates the result of value . and Logical and(a, b) Checks if both a and b are true. or Logical or(a, b) Checks if either a or b is true. if Logical if(condition, a, b) If condition is true, returns a . Otherwise, returns b . plus Operator plus(a, b) Adds a and b . minus Operator minus(a, b) Subtracts b from a . times Operator times(a, b) Multiplies a and b . div Operator div(a, b) Divides a by b . rem Operator rem(a, b) Returns the remainder of a divided by b . log Math log(a, b) Returns the logarithm of a to the base of b . ln Math ln(value) Returns the natural logarithm of value . pow Math pow(a, b) Returns a to the power of b . exp Math exp(value) Returns e to the power of value . map Math map(instart, inend, outstart, outend, value) Maps value over the range [instart, inend] and returns the result in the range [outstart, outend] .","title":"Anatomy of rules"},{"location":"feature-flags/anatomy-of-rules/#anatomy-of-rules","text":"At the heart of FFS are rules. Each feature flag is backed by a rule. It boils down to functions as commonly known in programming, or formulas as commonly seen in spreadsheets. Functions accept data, and return a result. That is numeric, between 0 and 1 . When it is 0 , the flag is disabled. When 1 , the flag is enabled. When in-between, the flag is partially enabled, meaning it is enabled for some users, proportionally to the value.","title":"Anatomy of rules"},{"location":"feature-flags/anatomy-of-rules/#examples","text":"To build intuition, let's look at some examples: 0 : the flag is disabled. false : the flag is disabled (same as 0 ). 1 : the flag is enabled. true : the flag is enabled (same as 1 ). 0.5 : the flag is enabled for 50% of users. Let's take it up a notch, and look at more useful rules: gte ( now (), datetime ( \"2038-01-19T04:14:07+01:00\" )) : enabled after January 19 2038 at 03:14:07 UTC. matches ( \"*@example.com\" , env [ \"user.email\" ]) : enabled for emails ending in @example.com . map ( now (), datetime ( \"2022-11-08\" ), datetime ( \"2022-11-15\" ), 0 , 1 ) : gradual rollout between November 8 and November 16, 2022. not ( isblank ( env [ \"user.email\" ])) : enabled for logged in users (assuming their email is set when logging in). pow ( map ( now (), datetime ( \"2021-11-08\" ), datetime ( \"2021-11-15\" ), 0 , 1 ), 2 ) : gradual rollout again, but exponential instead of linear over the week.","title":"Examples"},{"location":"feature-flags/anatomy-of-rules/#environment","text":"All metadata supplied by the SDK can be accessed using env[\"<key>\"] . You can send anything that makes sense to your app, and then use it in rules. Info Noticed env [ \"user.email\" ] in the examples above? It was supplied by the SDK.","title":"Environment"},{"location":"feature-flags/anatomy-of-rules/#results","text":"Results are always numerical. true and false are mapped to 1 and 0 , respectively. Any result that's neither a number nor boolean is treated as 0 .","title":"Results"},{"location":"feature-flags/anatomy-of-rules/#functions","text":"Name Type Syntax Description isblank Info isblank(value) Checks if the value is blank. eq Operator eq(a, b) Checks if a is equal to b . gt Operator gt(a, b) Checks if a is greater than b . gte Operator gte(a, b) Checks if a is greater than or equal to b . lt Operator lt(a, b) Checks if a is less than b . lte Operator lte(a, b) Checks if a is less than or equal to b . now Date now() Returns the current date and time. datetime Date datetime(value) Returns a date and time. value must follow ISO-8601's format date and time, or date. matches Lookup matches(regex, value) Checks if value matches regex . contains Lookup contains(list, value) Checks if list contains value . not Logical not(value) Negates the result of value . and Logical and(a, b) Checks if both a and b are true. or Logical or(a, b) Checks if either a or b is true. if Logical if(condition, a, b) If condition is true, returns a . Otherwise, returns b . plus Operator plus(a, b) Adds a and b . minus Operator minus(a, b) Subtracts b from a . times Operator times(a, b) Multiplies a and b . div Operator div(a, b) Divides a by b . rem Operator rem(a, b) Returns the remainder of a divided by b . log Math log(a, b) Returns the logarithm of a to the base of b . ln Math ln(value) Returns the natural logarithm of value . pow Math pow(a, b) Returns a to the power of b . exp Math exp(value) Returns e to the power of value . map Math map(instart, inend, outstart, outend, value) Maps value over the range [instart, inend] and returns the result in the range [outstart, outend] .","title":"Functions"},{"location":"feature-flags/archiving/","text":"","title":"Archiving"},{"location":"feature-flags/time-to-live/","text":"Time to live \u00b6 TODO: after implementing, describe the types, and why","title":"Time to live"},{"location":"feature-flags/time-to-live/#time-to-live","text":"TODO: after implementing, describe the types, and why","title":"Time to live"},{"location":"sdks/","text":"SDKs \u00b6 FFS provides two kind of SDKs: Frontend SDKs rely on the server to evaluate feature flags and synchronize the results. They are meant for unsafe environments, like frontends. Backend SDKs rely on the server to provide feature flag data, and evaluate them locally. They are meant for safe environments, like backends. The API is essentially the same for both. The only difference is how they work under the hood. Workflow \u00b6 The workflow can be as simple as: Initialize FFS. Check if flags are enabled or not. You can also: Specify metadata to be used in rule evaluation. Connect to a different URL (e.g., your own instance). Enable or disable live updates. Run a callback when FFS initializes with fresh data. Grab all flagg evaluations at once. Shutdown explicitly, to free up resources, or stop live updates. Availability \u00b6 The API is consistent across all SDKs, with frontend and backend variants available for each. All features available everywhere. Testing \u00b6 TODO: after implementing, describe how to leverage the test library","title":"SDKs"},{"location":"sdks/#sdks","text":"FFS provides two kind of SDKs: Frontend SDKs rely on the server to evaluate feature flags and synchronize the results. They are meant for unsafe environments, like frontends. Backend SDKs rely on the server to provide feature flag data, and evaluate them locally. They are meant for safe environments, like backends. The API is essentially the same for both. The only difference is how they work under the hood.","title":"SDKs"},{"location":"sdks/#workflow","text":"The workflow can be as simple as: Initialize FFS. Check if flags are enabled or not. You can also: Specify metadata to be used in rule evaluation. Connect to a different URL (e.g., your own instance). Enable or disable live updates. Run a callback when FFS initializes with fresh data. Grab all flagg evaluations at once. Shutdown explicitly, to free up resources, or stop live updates.","title":"Workflow"},{"location":"sdks/#availability","text":"The API is consistent across all SDKs, with frontend and backend variants available for each. All features available everywhere.","title":"Availability"},{"location":"sdks/#testing","text":"TODO: after implementing, describe how to leverage the test library","title":"Testing"},{"location":"sdks/go/","text":"Go \u00b6 TODO Installation \u00b6 TODO Frontend SDK \u00b6 TODO Backend SDK \u00b6 TODO Usage \u00b6 TODO","title":"Go"},{"location":"sdks/go/#go","text":"TODO","title":"Go"},{"location":"sdks/go/#installation","text":"TODO","title":"Installation"},{"location":"sdks/go/#frontend-sdk","text":"TODO","title":"Frontend SDK"},{"location":"sdks/go/#backend-sdk","text":"TODO","title":"Backend SDK"},{"location":"sdks/go/#usage","text":"TODO","title":"Usage"},{"location":"sdks/javascript/","text":"JavaScript \u00b6 TODO Installation \u00b6 TODO Frontend SDK \u00b6 TODO Backend SDK \u00b6 TODO Usage \u00b6 Initialize as early as possible. const ffs = new Ffs ( \"TOKEN\" ) ffs . initialize () Use it. ffs . isEnabled ( \"test\" ) // true That's it. That's the common workflow. The next code snippet shows more advanced usage. TODO: advanced usage","title":"JavaScript"},{"location":"sdks/javascript/#javascript","text":"TODO","title":"JavaScript"},{"location":"sdks/javascript/#installation","text":"TODO","title":"Installation"},{"location":"sdks/javascript/#frontend-sdk","text":"TODO","title":"Frontend SDK"},{"location":"sdks/javascript/#backend-sdk","text":"TODO","title":"Backend SDK"},{"location":"sdks/javascript/#usage","text":"Initialize as early as possible. const ffs = new Ffs ( \"TOKEN\" ) ffs . initialize () Use it. ffs . isEnabled ( \"test\" ) // true That's it. That's the common workflow. The next code snippet shows more advanced usage. TODO: advanced usage","title":"Usage"},{"location":"sdks/kotlin/","text":"Kotlin \u00b6 TODO Installation \u00b6 TODO Frontend SDK \u00b6 TODO Backend SDK \u00b6 TODO Usage \u00b6 Initialize as early as possible. val ffs = Ffs ( \"TOKEN\" ) ffs . initialize () Use it. ffs . isEnabled ( \"test\" ) // true That's it. That's the common workflow. The next code snippet shows more advanced usage. // Instantiate FFS. val ffs = Ffs ( apiToken = \"TOKEN\" , // Required. url = \"https://your.own.ffs/v1\" , // Defaults to \"https://ffs.delivery/v1\". liveUpdates = false , // Defaults to true. If false, data will sync once. ) // Metadata to be used in evaluation. All optional. ffs . setRolloutId ( \"Doist\" ) // Defaults random string. Controls staged rollouts. ffs . setUserId ( 12345 ) ffs . setUserEmail ( \"example@ffs.com\" ) ffs . setDeviceName ( \"Pixel 6 Pro\" ) ffs . setDeviceOs ( \"Android 12\" ) ffs . setDeviceLocale ( \"en_US\" ) ffs . putNumber ( \"app-launches\" , 42 ) ffs . putBoolean ( \"beta\" , true ) ffs . putListString ( \"experiments\" , listOf ( \"dark-theme\" , \"outline-icons\" )) // Initialize FFS. // The callback is optional. It runs once it's done initializing. ffs . initialize { val all = all () // Maps all flag names to their evaluation. all . forEach { ( name , enabled ) -> println ( \" $ name is $ enabled \" ) } // Close the connection. shutdown () } // Check a flag with a default value. ffs . isEnabled ( \"unknown\" , false ) // false","title":"Kotlin"},{"location":"sdks/kotlin/#kotlin","text":"TODO","title":"Kotlin"},{"location":"sdks/kotlin/#installation","text":"TODO","title":"Installation"},{"location":"sdks/kotlin/#frontend-sdk","text":"TODO","title":"Frontend SDK"},{"location":"sdks/kotlin/#backend-sdk","text":"TODO","title":"Backend SDK"},{"location":"sdks/kotlin/#usage","text":"Initialize as early as possible. val ffs = Ffs ( \"TOKEN\" ) ffs . initialize () Use it. ffs . isEnabled ( \"test\" ) // true That's it. That's the common workflow. The next code snippet shows more advanced usage. // Instantiate FFS. val ffs = Ffs ( apiToken = \"TOKEN\" , // Required. url = \"https://your.own.ffs/v1\" , // Defaults to \"https://ffs.delivery/v1\". liveUpdates = false , // Defaults to true. If false, data will sync once. ) // Metadata to be used in evaluation. All optional. ffs . setRolloutId ( \"Doist\" ) // Defaults random string. Controls staged rollouts. ffs . setUserId ( 12345 ) ffs . setUserEmail ( \"example@ffs.com\" ) ffs . setDeviceName ( \"Pixel 6 Pro\" ) ffs . setDeviceOs ( \"Android 12\" ) ffs . setDeviceLocale ( \"en_US\" ) ffs . putNumber ( \"app-launches\" , 42 ) ffs . putBoolean ( \"beta\" , true ) ffs . putListString ( \"experiments\" , listOf ( \"dark-theme\" , \"outline-icons\" )) // Initialize FFS. // The callback is optional. It runs once it's done initializing. ffs . initialize { val all = all () // Maps all flag names to their evaluation. all . forEach { ( name , enabled ) -> println ( \" $ name is $ enabled \" ) } // Close the connection. shutdown () } // Check a flag with a default value. ffs . isEnabled ( \"unknown\" , false ) // false","title":"Usage"},{"location":"sdks/python/","text":"Python \u00b6 TODO Installation \u00b6 TODO Frontend SDK \u00b6 TODO Backend SDK \u00b6 TODO Usage \u00b6 TODO","title":"Python"},{"location":"sdks/python/#python","text":"TODO","title":"Python"},{"location":"sdks/python/#installation","text":"TODO","title":"Installation"},{"location":"sdks/python/#frontend-sdk","text":"TODO","title":"Frontend SDK"},{"location":"sdks/python/#backend-sdk","text":"TODO","title":"Backend SDK"},{"location":"sdks/python/#usage","text":"TODO","title":"Usage"},{"location":"sdks/ruby/","text":"Ruby \u00b6 TODO Installation \u00b6 TODO Frontend SDK \u00b6 TODO Backend SDK \u00b6 TODO Usage \u00b6 TODO","title":"Ruby"},{"location":"sdks/ruby/#ruby","text":"TODO","title":"Ruby"},{"location":"sdks/ruby/#installation","text":"TODO","title":"Installation"},{"location":"sdks/ruby/#frontend-sdk","text":"TODO","title":"Frontend SDK"},{"location":"sdks/ruby/#backend-sdk","text":"TODO","title":"Backend SDK"},{"location":"sdks/ruby/#usage","text":"TODO","title":"Usage"},{"location":"sdks/rust/","text":"Rust \u00b6 TODO Installation \u00b6 TODO Frontend SDK \u00b6 TODO Backend SDK \u00b6 TODO Usage \u00b6 TODO","title":"Rust"},{"location":"sdks/rust/#rust","text":"TODO","title":"Rust"},{"location":"sdks/rust/#installation","text":"TODO","title":"Installation"},{"location":"sdks/rust/#frontend-sdk","text":"TODO","title":"Frontend SDK"},{"location":"sdks/rust/#backend-sdk","text":"TODO","title":"Backend SDK"},{"location":"sdks/rust/#usage","text":"TODO","title":"Usage"},{"location":"sdks/swift/","text":"Swift \u00b6 TODO Installation \u00b6 TODO Frontend SDK \u00b6 TODO Backend SDK \u00b6 TODO Usage \u00b6 let ffs = Ffs ( \"TOKEN\" ) ffs . initialize () Use it. ffs . isEnabled ( \"test\" ) // true That's it. That's the common workflow. The next code snippet shows more advanced usage. TODO: advanced usage","title":"Swift"},{"location":"sdks/swift/#swift","text":"TODO","title":"Swift"},{"location":"sdks/swift/#installation","text":"TODO","title":"Installation"},{"location":"sdks/swift/#frontend-sdk","text":"TODO","title":"Frontend SDK"},{"location":"sdks/swift/#backend-sdk","text":"TODO","title":"Backend SDK"},{"location":"sdks/swift/#usage","text":"let ffs = Ffs ( \"TOKEN\" ) ffs . initialize () Use it. ffs . isEnabled ( \"test\" ) // true That's it. That's the common workflow. The next code snippet shows more advanced usage. TODO: advanced usage","title":"Usage"},{"location":"server/","text":"Server \u00b6 Serves the API for the SDKs and dashboard. Architecture \u00b6 It uses Ktor , a coroutines-based library for building web applications in Kotlin. It follows many of its design recommendations, especially around routing. Data layer \u00b6 The data layer is implemented using SQLDelight , a data storage and access library where the database is the canonical source of instances at runtime, i.e., it generates type-safe Kotlin APIs from SQL. It has built-in support for generating migrations, too.","title":"Server"},{"location":"server/#server","text":"Serves the API for the SDKs and dashboard.","title":"Server"},{"location":"server/#architecture","text":"It uses Ktor , a coroutines-based library for building web applications in Kotlin. It follows many of its design recommendations, especially around routing.","title":"Architecture"},{"location":"server/#data-layer","text":"The data layer is implemented using SQLDelight , a data storage and access library where the database is the canonical source of instances at runtime, i.e., it generates type-safe Kotlin APIs from SQL. It has built-in support for generating migrations, too.","title":"Data layer"},{"location":"server/configuration/","text":"Configuration \u00b6 The server can be configured using environment variables or command-line switches: Environment variable Command-line switch Default Description KTOR_DEVELOPMENT -Dio.ktor.development= true Run in development mode, enabling auto-reload and increasing verbosity. KTOR_DEPLOYMENT_PORT -port= 8080 Port to listen on. KTOR_DEPLOYMENT_SSL_PORT -sslPort= SSL port to listen on. Note: KTOR_SECURITY_* must be set with this. KTOR_SECURITY_SSL_KEY_STORE -sslKeyStore= Path to the SSL key store. KTOR_SECURITY_SSL_KEY_STORE_PASSWORD -P:ktor.security.ssl.keyStorePassword= Password for the SSL key store. KTOR_SECURITY_SSL_KEY_ALIAS -P:ktor.security.ssl.keyAlias= Key alias in the key store. KTOR_SECURITY_SSL_PRIVATE_KEY_PASSWORD -P:ktor.security.ssl.privateKeyPassword= Password for the private key. SQLDELIGHT_DIALECT -PsqldelightDialect= sqlite:3.18 SQL dialect from SQLDelight's available options . Note: Read at compile time, not runtime. Note: Must be consistent with the datasource below. HIKARI_DATASOURCE_CLASSNAME -P:hikari.dataSourceClassName= org.sqlite.SQLiteDataSource Class name provided by the JDBC driver. See Hikari's options . Note: must be consistent with the dialect above. HIKARI_DATASOURCE_URL -P:hikari.dataSource.url= jdbc:sqlite: (in-memory) Location of the database file. Applicable to file-based databases, like SQLite. HIKARI_DATASOURSE_DATABASE_NAME -P:hikari.dataSource.databaseName= Depends on the JDBC driver. Name of the database. Applicable to connection-based databases, like PostgreSQL or MariaDB. HIKARI_DATASOURCE_SERVER_NAME -P:hikari.dataSource.serverName= localhost Name of the server. Applicable to connection-based databases, like PostgreSQL or MariaDB. HIKARI_DATASOURCE_PORT_NUMBER -P:hikari.dataSource.portNumber= Depends on the JDBC driver. Port number. Applicable to connection-based databases, like PostgreSQL or MariaDB. HIKARI_DATASOURCE_USERNAME -P:hikari.dataSource.username= Refer to Hikari's options . HIKARI_DATASOURCE_PASSWORD -P:hikari.dataSource.password= Refer to Hikari's options . HIKARI_DATASOURCE_AUTO_COMMIT -P:hikari.dataSource.autoCommit= Refer to Hikari's options . HIKARI_DATASOURCE_CONNECTION_TIMEOUT -P:hikari.dataSource.connectionTimeout= Refer to Hikari's options . HIKARI_DATASOURCE_IDLE_TIMEOUT -P:hikari.dataSource.idleTimeout= Refer to Hikari's options . HIKARI_DATASOURCE_KEEPALIVE_TIMEOUT -P:hikari.dataSource.keepAliveTimeout= Refer to Hikari's options . HIKARI_DATASOURCE_MAX_LIFETIME -P:hikari.dataSource.maxLifetime= Refer to Hikari's options . HIKARI_DATASOURCE_CONNECTION_TEST_QUERY -P:hikari.dataSource.connectionTestQuery= Refer to Hikari's options . HIKARI_DATASOURCE_MINIMUM_IDLE -P:hikari.dataSource.minimumIdle= Refer to Hikari's options . HIKARI_DATASOURCE_MAXIMUM_POOL_SIZE -P:hikari.dataSource.maximumPoolSize= Refer to Hikari's options . HIKARI_DATASOURCE_POOL_NAME -P:hikari.dataSource.poolName= Refer to Hikari's options . The defaults are adequate for local development. Production \u00b6 When running in production, disable development mode, and switch to an adequate database configuration and dialect.","title":"Configuration"},{"location":"server/configuration/#configuration","text":"The server can be configured using environment variables or command-line switches: Environment variable Command-line switch Default Description KTOR_DEVELOPMENT -Dio.ktor.development= true Run in development mode, enabling auto-reload and increasing verbosity. KTOR_DEPLOYMENT_PORT -port= 8080 Port to listen on. KTOR_DEPLOYMENT_SSL_PORT -sslPort= SSL port to listen on. Note: KTOR_SECURITY_* must be set with this. KTOR_SECURITY_SSL_KEY_STORE -sslKeyStore= Path to the SSL key store. KTOR_SECURITY_SSL_KEY_STORE_PASSWORD -P:ktor.security.ssl.keyStorePassword= Password for the SSL key store. KTOR_SECURITY_SSL_KEY_ALIAS -P:ktor.security.ssl.keyAlias= Key alias in the key store. KTOR_SECURITY_SSL_PRIVATE_KEY_PASSWORD -P:ktor.security.ssl.privateKeyPassword= Password for the private key. SQLDELIGHT_DIALECT -PsqldelightDialect= sqlite:3.18 SQL dialect from SQLDelight's available options . Note: Read at compile time, not runtime. Note: Must be consistent with the datasource below. HIKARI_DATASOURCE_CLASSNAME -P:hikari.dataSourceClassName= org.sqlite.SQLiteDataSource Class name provided by the JDBC driver. See Hikari's options . Note: must be consistent with the dialect above. HIKARI_DATASOURCE_URL -P:hikari.dataSource.url= jdbc:sqlite: (in-memory) Location of the database file. Applicable to file-based databases, like SQLite. HIKARI_DATASOURSE_DATABASE_NAME -P:hikari.dataSource.databaseName= Depends on the JDBC driver. Name of the database. Applicable to connection-based databases, like PostgreSQL or MariaDB. HIKARI_DATASOURCE_SERVER_NAME -P:hikari.dataSource.serverName= localhost Name of the server. Applicable to connection-based databases, like PostgreSQL or MariaDB. HIKARI_DATASOURCE_PORT_NUMBER -P:hikari.dataSource.portNumber= Depends on the JDBC driver. Port number. Applicable to connection-based databases, like PostgreSQL or MariaDB. HIKARI_DATASOURCE_USERNAME -P:hikari.dataSource.username= Refer to Hikari's options . HIKARI_DATASOURCE_PASSWORD -P:hikari.dataSource.password= Refer to Hikari's options . HIKARI_DATASOURCE_AUTO_COMMIT -P:hikari.dataSource.autoCommit= Refer to Hikari's options . HIKARI_DATASOURCE_CONNECTION_TIMEOUT -P:hikari.dataSource.connectionTimeout= Refer to Hikari's options . HIKARI_DATASOURCE_IDLE_TIMEOUT -P:hikari.dataSource.idleTimeout= Refer to Hikari's options . HIKARI_DATASOURCE_KEEPALIVE_TIMEOUT -P:hikari.dataSource.keepAliveTimeout= Refer to Hikari's options . HIKARI_DATASOURCE_MAX_LIFETIME -P:hikari.dataSource.maxLifetime= Refer to Hikari's options . HIKARI_DATASOURCE_CONNECTION_TEST_QUERY -P:hikari.dataSource.connectionTestQuery= Refer to Hikari's options . HIKARI_DATASOURCE_MINIMUM_IDLE -P:hikari.dataSource.minimumIdle= Refer to Hikari's options . HIKARI_DATASOURCE_MAXIMUM_POOL_SIZE -P:hikari.dataSource.maximumPoolSize= Refer to Hikari's options . HIKARI_DATASOURCE_POOL_NAME -P:hikari.dataSource.poolName= Refer to Hikari's options . The defaults are adequate for local development.","title":"Configuration"},{"location":"server/configuration/#production","text":"When running in production, disable development mode, and switch to an adequate database configuration and dialect.","title":"Production"},{"location":"server/running/","text":"Running \u00b6 There are a few ways to run the server. Info Run commands from the root folder of the project. Using Gradle \u00b6 Start the server using Gradle: ./gradlew :ffs-server:application:run Using a JAR \u00b6 Create an executable JAR and start it: ./gradlew :ffs-server:shadowJar java -jar ffs-server/build/libs/ffs-server-all.jar Using Docker \u00b6 Build an image and run it: docker build -t ffs-server -f ffs-server/Dockerfile . docker run -p 8080 :8080 my-application","title":"Running"},{"location":"server/running/#running","text":"There are a few ways to run the server. Info Run commands from the root folder of the project.","title":"Running"},{"location":"server/running/#using-gradle","text":"Start the server using Gradle: ./gradlew :ffs-server:application:run","title":"Using Gradle"},{"location":"server/running/#using-a-jar","text":"Create an executable JAR and start it: ./gradlew :ffs-server:shadowJar java -jar ffs-server/build/libs/ffs-server-all.jar","title":"Using a JAR"},{"location":"server/running/#using-docker","text":"Build an image and run it: docker build -t ffs-server -f ffs-server/Dockerfile . docker run -p 8080 :8080 my-application","title":"Using Docker"}]}